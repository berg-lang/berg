# ". postfix.-- postfix.++",
# "prefix.-- prefix.++ prefix.- prefix.+ prefix.!",
# "* / %",
# "+ -",
# "> >= < <=",
# "== !=",
# "postfix.+ postfix.* postfix.?",
# "&&",
# "|| ??",
# "right indent.: = += -= *= /= %= ||= &&= ??=",
# ",",
# "&",
# "|",
# [ { key: :call } ],
# "\n ;",
# # Delimiters want everything as children.
# [
#     { key: :indent, type: :start_delimiter, ended_by: :undent, direction: :right },
#     { key: :undent, type: :end_delimiter, started_by: :indent, direction: :right },
#     { string: "(", type: :start_delimiter, ended_by: ")", direction: :right },
#     { string: ")", type: :end_delimiter, started_by: "(", direction: :right },
#     { string: "{", type: :start_delimiter, ended_by: "}", direction: :right },
#     { string: "}", type: :end_delimiter, started_by: "{", direction: :right },
#     { key: :sof, type: :start_delimiter, ended_by: :eof, direction: :right },
#     { key: :eof, type: :end_delimiter, started_by: :sof, direction: :right },
# ],

EqualPrecedence:
  #
  # ". postfix.-- postfix.++",
  #
  # .
  - Berg: a.b.c
    Ast -> InfixOperation:
      Left -> InfixOperation: a.b
      Right -> Bareword: c
  - Berg: a.b--
    Ast -> PostfixOperation:
      Left -> InfixOperation: a.b
      Operator: --
  - Berg: a.b++
    Ast -> PostfixOperation:
      Left -> InfixOperation: a.b
      Operator: ++

  # --
  - Berg: a--.b
    Ast -> InfixOperation:
      Left -> PostfixOperation:
        $Term: a--
        Left -> Bareword: a
        Operator: --
      Operator: "."
      Right -> Bareword: b
  - Berg: a--++
    Ast -> PostfixOperation:
      Left -> PostfixOperation: a--
      Operator: ++
  - Berg: a----
    Ast -> PostfixOperation:
      Left -> PostfixOperation: a--
      Operator: 1@4-5 = --

  # ++
  - Berg: a++--
    Ast -> PostfixOperation:
      Left -> PostfixOperation: a++
      Operator: --
  - Berg: a++++
    Ast -> PostfixOperation:
      Left -> PostfixOperation: a++
      Operator: 1@4-5 = ++
  - Berg: a++.b
    Ast -> InfixOperation:
      Left -> PostfixOperation:
        $Term: a++
        Left -> Bareword: a
        Operator: ++
      Operator: "."
      Right -> Bareword: b

  #
  # "prefix.-- prefix.++ prefix.- prefix.+ prefix.!",
  #
  # --
  - Berg: ----a
    Ast -> PrefixOperation:
      Operator: 1@1-2 = --
      Right -> PrefixOperation: --a
  - Berg: --++a
    Ast -> PrefixOperation:
      Operator: --
      Right -> PrefixOperation: ++a
  - Berg: ---a
    Ast -> PrefixOperation:
      Operator: 1@1-2 = --
      Right -> PrefixOperation: -a
  - Berg: --+a
    Ast -> PrefixOperation:
      Operator: --
      Right -> PrefixOperation: +a
  - Berg: --!a
    Ast -> PrefixOperation:
      Operator: --
      Right -> PrefixOperation: "!a"

  # ++
  - Berg: ++--a
    Ast -> PrefixOperation:
      Operator: ++
      Right -> PrefixOperation: --a
  - Berg: ++++a
    Ast -> PrefixOperation:
      Operator: 1@1-2 = ++
      Right -> PrefixOperation: ++a
  - Berg: ++-a
    Ast -> PrefixOperation:
      Operator: ++
      Right -> PrefixOperation: -a
  - Berg: +++a
    Ast -> PrefixOperation:
      Operator: 1@1-2 = ++
      Right -> PrefixOperation: "+a"
  - Berg: ++!a
    Ast -> PrefixOperation:
      Operator: ++
      Right -> PrefixOperation: "!a"

  # -
  # NOTE parser will always treat this as -- -a. This is the rules.
  - Berg: ---a
    Ast -> PrefixOperation:
      Operator: 1@1-2 = --
      Right -> PrefixOperation: -a
  - Berg: -++a
    Ast -> PrefixOperation:
      Operator: "-"
      Right -> PrefixOperation: ++a
  # NOTE parser will always treat this as -- a. This is the rules.
  - Berg: --a
    Ast -> PrefixOperation:
      Operator: --
      Right -> Bareword: a
  - Berg: -+a
    Ast -> PrefixOperation:
      Operator: "-"
      Right -> PrefixOperation: +a
  - Berg: -!a
    Ast -> PrefixOperation:
      Operator: "-"
      Right -> PrefixOperation: "!a"

  # +
  - Berg: +--a
    Ast -> PrefixOperation:
      Operator: +
      Right -> PrefixOperation: --a
  # NOTE parser will always treat this as ++ +a. This is the rules.
  - Berg: +++a
    Ast -> PrefixOperation:
      Operator: 1@1-2 = ++
      Right -> PrefixOperation: +a
  - Berg: +-a
    Ast -> PrefixOperation:
      Operator: +
      Right -> PrefixOperation: -a
  # NOTE parser will always treat this as ++ a. This is the rules.
  - Berg: ++a
    Ast -> PrefixOperation:
      Operator: ++
      Right -> Bareword: a
  - Berg: --!a
    Ast -> PrefixOperation:
      Operator: --
      Right -> PrefixOperation: "!a"

  # !
  - Berg: "!--a"
    Ast -> PrefixOperation:
      Operator: "!"
      Right -> PrefixOperation: --a
  - Berg: "!++a"
    Ast -> PrefixOperation:
      Operator: "!"
      Right -> PrefixOperation: ++a
  - Berg: "!-a"
    Ast -> PrefixOperation:
      Operator: "!"
      Right -> PrefixOperation: -a
  - Berg: "!+a"
    Ast -> PrefixOperation:
      Operator: "!"
      Right -> PrefixOperation: +a
  - Berg: "!!a"
    Ast -> PrefixOperation:
      Operator: "1@1 = !"
      Right -> PrefixOperation: "!a"

  #
  # "* / %",
  #
  # *
  - Berg: a*b*c
    Ast -> InfixOperation:
      Left -> InfixOperation: a*b
      Operator: "1@4 = *"
      Right -> Bareword: c
  - Berg: a*b/c
    Ast -> InfixOperation:
      Left -> InfixOperation: a*b
      Operator: /
      Right -> Bareword: c
  - Berg: a*b%c
    Ast -> InfixOperation:
      Left -> InfixOperation: a*b
      Operator: "%"
      Right -> Bareword: c
  # /
  - Berg: a/b*c
    Ast -> InfixOperation:
      Left -> InfixOperation: a/b
      Operator: "*"
      Right -> Bareword: c
  - Berg: a/b/c
    Ast -> InfixOperation:
      Left -> InfixOperation: a/b
      Operator: 1@4 = /
      Right -> Bareword: c
  - Berg: a/b%c
    Ast -> InfixOperation:
      Left -> InfixOperation: a/b
      Operator: "%"
      Right -> Bareword: c
  # /
  - Berg: a%b*c
    Ast -> InfixOperation:
      Left -> InfixOperation: a%b
      Operator: "*"
      Right -> Bareword: c
  - Berg: a%b/c
    Ast -> InfixOperation:
      Left -> InfixOperation: a%b
      Operator: /
      Right -> Bareword: c
  - Berg: a%b%c
    Ast -> InfixOperation:
      Left -> InfixOperation: a%b
      Operator: 1@4 = %
      Right -> Bareword: c

  # "+ -",
  - Berg: a+b+c
    Ast -> InfixOperation:
      Left -> InfixOperation: a+b
      Operator: 1@4 = +
      Right -> Bareword: c
  - Berg: a+b-c
    Ast -> InfixOperation:
      Left -> InfixOperation: a+b
      Operator: "-"
      Right -> Bareword: c
  - Berg: a-b+c
    Ast -> InfixOperation:
      Left -> InfixOperation: a-b
      Operator: +
      Right -> Bareword: c
  - Berg: a-b-c
    Ast -> InfixOperation:
      Left -> InfixOperation: a-b
      Operator: 1@4 = -
      Right -> Bareword: c

  # "> >= < <=",
  # "== !=",
  # "postfix.+ postfix.* postfix.?",
  # "&&",
  # "|| ??",
  # "right indent.: = += -= *= /= %= ||= &&= ??=",
  # ",",
  # "&",
  # "|",
  # [ { key: :call } ],
  # "\n ;",
  # # Delimiters want everything as children.
  # [
  #     { key: :indent, type: :start_delimiter, ended_by: :undent, direction: :right },
  #     { key: :undent, type: :end_delimiter, started_by: :indent, direction: :right },
  #     { string: "(", type: :start_delimiter, ended_by: ")", direction: :right },
  #     { string: ")", type: :end_delimiter, started_by: "(", direction: :right },
  #     { string: "{", type: :start_delimiter, ended_by: "}", direction: :right },
  #     { string: "}", type: :end_delimiter, started_by: "{", direction: :right },
  #     { key: :sof, type: :start_delimiter, ended_by: :eof, direction: :right },
  #     { key: :eof, type: :end_delimiter, started_by: :sof, direction: :right },
  # ],
